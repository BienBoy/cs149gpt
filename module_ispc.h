//
// module_ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>

#if !defined(__cplusplus)
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
#include <stdbool.h>
#else
typedef int bool;
#endif
#endif



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void blockMatmul(float * A, float * B, float * C, int32_t M, int32_t N, int32_t K, int32_t m1, int32_t n1, int32_t k1, int32_t m2, int32_t n2, int32_t k2);
    extern void blockMatmul_T(float * A, float * B, float * C, int32_t M, int32_t N, int32_t K, int32_t m1, int32_t n1, int32_t k1, int32_t m2, int32_t n2, int32_t k2);
    extern void flashAttentionHelper(float * A, float * B, float * C, float * v1, float * v2, int32_t M, int32_t N, int32_t K);
    extern void matexp(float * A, float * B, int32_t M, int32_t N);
    extern void matmul(float * A, float * B, float * C, int32_t M, int32_t N, int32_t K);
    extern void matmulRow(float * A, float * B, float * C, int32_t M, int32_t N, int32_t K, int32_t m);
    extern void matmul_T(float * A, float * B, float * C, int32_t M, int32_t N, int32_t K);
    extern void matmul_TRow(float * A, float * B, float * C, int32_t M, int32_t N, int32_t K, int32_t m);
    extern void rowsum(float * A, float * B, int32_t M, int32_t N);
    extern void safeSoftmax(float * A, int32_t M, int32_t N);
    extern void safeVecSoftmax(float * A, int32_t N);
    extern void vecsum(float * A, float * B, float * C, int32_t N);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
